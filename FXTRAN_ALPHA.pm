package FXTRAN_ALPHA;

use strict;

my %U2S = %{{
  'kernels' => 'kernels',
  'program' => 'program',
  'named' => 'named',
  'dummy' => 'dummy',
  'device' => 'device',
  'literal' => 'literal',
  'item' => 'item',
  'elemental' => 'elemental',
  'explicit' => 'explicit',
  'intent' => 'intent',
  'io' => 'io',
  'flush' => 'flush',
  'pointer' => 'pointer',
  'contains' => 'contains',
  'access' => 'access',
  'bind' => 'bind',
  'nullify' => 'nullify',
  'loop' => 'loop',
  'selector' => 'selector',
  'init' => 'init',
  'parent' => 'parent',
  'import' => 'import',
  'non_overridable' => 'non_overridable',
  'single' => 'single',
  'exit' => 'exit',
  'wait' => 'wait',
  'enter' => 'enter',
  'ac' => 'ac',
  'is' => 'is',
  'selectcase' => 'selectcase',
  'parallel' => 'parallel',
  'contained' => 'contained',
  'delete' => 'delete',
  'backspace' => 'backspace',
  'array' => 'array',
  'identifier' => 'identifier',
  'asynchronous' => 'asynchronous',
  'co' => 'co',
  'proc' => 'proc',
  'thread' => 'thread',
  'file' => 'file',
  'unknown' => 'unkwown',
  'connect' => 'connect',
  'binding' => 'binding',
  'work' => 'work',
  'complex' => 'complex',
  'private' => 'private',
  'global' => 'G',
  'stmt' => 'stmt',
  'bound' => 'bound',
  'rewind' => 'rewind',
  'close' => 'close',
  'deallocate' => 'deallocate',
  'end' => 'end',
  'shutdown' => 'shutdown',
  'subscript' => 'subscript',
  'optional' => 'optional',
  'pure' => 'pure',
  'shape' => 'shape',
  'implicit' => 'implicit',
  'reduction' => 'reduction',
  'pause' => 'pause',
  'interface' => 'interface',
  'star' => 'star',
  'alt' => 'alt',
  'action' => 'action',
  'if' => 'if',
  'pointee' => 'pointee',
  'range' => 'range',
  'save' => 'save',
  'value' => 'value',
  'mask' => 'mask',
  'result' => 'result',
  'abstract' => 'abstract',
  'type' => 'T',
  'finalizer' => 'finalizer',
  'openmp' => 'openmp',
  'hollerith' => 'hollerith',
  'ambiguous' => 'ambiguous',
  'assignment' => 'a',
  'status' => 'status',
  'submodule' => 'submodule',
  'nopass' => 'nopass',
  'entity' => 'EN',
  'condition' => 'condition',
  'filename' => 'filename',
  'assumed' => 'assumed',
  'defined' => 'defined',
  'data' => 'data',
  'constant' => 'constant',
  'len' => 'len',
  'cycle' => 'cycle',
  'control' => 'control',
  'construct' => 'construct',
  'class' => 'class',
  'specific' => 'specific',
  'string' => 'string',
  'constructor' => 'constructor',
  'update' => 'update',
  'rank' => 'rank',
  'recursive' => 'recursive',
  'goto' => 'goto',
  'parameter' => 'parameter',
  'step' => 'step',
  'arg' => 'arg',
  'broken' => 'broken',
  'master' => 'master',
  'serial' => 'serial',
  'protected' => 'protected',
  'public' => 'public',
  'openacc' => 'openacc',
  'critical' => 'critical',
  'subroutine' => 'subroutine',
  'clause' => 'clause',
  'repeat' => 'repeat',
  'call' => 'call',
  'target' => 'target',
  'forall' => 'forall',
  'name' => 'N',
  'volatile' => 'volatile',
  'set' => 'set',
  'derived' => 'derived',
  'output' => 'output',
  'module' => 'module',
  'association' => 'association',
  'kind' => 'K',
  'internal' => 'internal',
  'upper' => 'upper',
  'namelist' => 'namelist',
  'label' => 'label',
  'ordered' => 'ordered',
  'extends' => 'extends',
  'enumerator' => 'enumerator',
  'stop' => 'stop',
  'element' => 'element',
  'external' => 'external',
  'expr' => 'E',
  'character' => 'character',
  'where' => 'where',
  'nature' => 'nature',
  'else' => 'else',
  'local' => 'LC',
  'rename' => 'rename',
  'ref' => 'R',
  'function' => 'function',
  'cray' => 'cray',
  'stride' => 'stride',
  'inquire' => 'inquire',
  'sequence' => 'sequence',
  'include' => 'include',
  'print' => 'print',
  'lower' => 'lower',
  'namespace' => 'NS',
  'allocate' => 'allocate',
  'declare' => 'declare',
  'char' => 'char',
  'atomic' => 'atomic',
  'contiguous' => 'contiguous',
  'computed' => 'computed',
  'pos' => 'pos',
  'mark' => 'mark',
  'select' => 'select',
  'assign' => 'assign',
  'object' => 'obj',
  'chunk' => 'chunk',
  'saved' => 'saved',
  'unit' => 'unit',
  'none' => 'none',
  'symbol' => 'S',
  'group' => 'group',
  'code' => 'code',
  'then' => 'then',
  'dtio' => 'dtio',
  'entry' => 'entry',
  'pass' => 'pass',
  'letter' => 'letter',
  'allocatable' => 'allocatable',
  'routine' => 'routine',
  'format' => 'format',
  'section' => 'section',
  'use' => 'use',
  'read' => 'read',
  'variable' => 'V',
  'generic' => 'generic',
  'logical' => 'logical',
  'attribute' => 'attribute',
  'host' => 'host',
  'continue' => 'continue',
  'open' => 'open',
  'list' => 'LT',
  'common' => 'common',
  'procedure' => 'procedure',
  'share' => 'share',
  'definition' => 'definition',
  'iterator' => 'iterator',
  'operator' => 'op',
  'final' => 'final',
  'deferred' => 'deferred',
  'return' => 'return',
  'arithmetic' => 'arithmetic',
  'case' => 'case',
  'integer' => 'integer',
  'omp' => 'omp',
  'test' => 'test',
  'write' => 'write',
  'cache' => 'cache',
  'dimension' => 'DIM',
  'designator' => 'designator',
  'user' => 'user',
  'equivalence' => 'equivalence',
  'numeric' => 'numeric',
  'size' => 'size',
  'component' => 'component',
  'real' => 'real',
  'do' => 'do',
  'triplet' => 'triplet',
  'block' => 'block',
  'associate' => 'associate',
  'parens' => 'parens',
  'assigned' => 'assigned',
  'enum' => 'enum',
  'selecttype' => 'selecttype',
  'inquiry' => 'inquiry',
  'intrinsic' => 'intrinsic',
  'ancestor' => 'ancestor',
  'prefix' => 'prefix',
  'decl' => 'decl',
  'input' => 'input',
  'sections' => 'sections',
  'spec' => 'spec'
}
};
my %S2U = %{{
  'NS' => 'namespace',
  'step' => 'step',
  'arg' => 'arg',
  'unkwown' => 'unknown',
  'master' => 'master',
  'broken' => 'broken',
  'serial' => 'serial',
  'openacc' => 'openacc',
  'protected' => 'protected',
  'public' => 'public',
  'critical' => 'critical',
  'len' => 'len',
  'constant' => 'constant',
  'defined' => 'defined',
  'data' => 'data',
  'construct' => 'construct',
  'cycle' => 'cycle',
  'control' => 'control',
  'string' => 'string',
  'specific' => 'specific',
  'class' => 'class',
  'constructor' => 'constructor',
  'T' => 'type',
  'recursive' => 'recursive',
  'update' => 'update',
  'rank' => 'rank',
  'goto' => 'goto',
  'parameter' => 'parameter',
  'finalizer' => 'finalizer',
  'hollerith' => 'hollerith',
  'openmp' => 'openmp',
  'ambiguous' => 'ambiguous',
  'submodule' => 'submodule',
  'status' => 'status',
  'condition' => 'condition',
  'nopass' => 'nopass',
  'filename' => 'filename',
  'assumed' => 'assumed',
  'end' => 'end',
  'shutdown' => 'shutdown',
  'pure' => 'pure',
  'optional' => 'optional',
  'subscript' => 'subscript',
  'shape' => 'shape',
  'reduction' => 'reduction',
  'pause' => 'pause',
  'interface' => 'interface',
  'implicit' => 'implicit',
  'star' => 'star',
  'alt' => 'alt',
  'range' => 'range',
  'pointee' => 'pointee',
  'if' => 'if',
  'action' => 'action',
  'result' => 'result',
  'mask' => 'mask',
  'abstract' => 'abstract',
  'value' => 'value',
  'save' => 'save',
  'thread' => 'thread',
  'file' => 'file',
  'private' => 'private',
  'complex' => 'complex',
  'work' => 'work',
  'binding' => 'binding',
  'connect' => 'connect',
  'stmt' => 'stmt',
  'bound' => 'bound',
  'close' => 'close',
  'deallocate' => 'deallocate',
  'rewind' => 'rewind',
  'enter' => 'enter',
  'ac' => 'ac',
  'wait' => 'wait',
  'exit' => 'exit',
  'selectcase' => 'selectcase',
  'parallel' => 'parallel',
  'is' => 'is',
  'EN' => 'entity',
  'contained' => 'contained',
  'LT' => 'list',
  'G' => 'global',
  'delete' => 'delete',
  'backspace' => 'backspace',
  'array' => 'array',
  'asynchronous' => 'asynchronous',
  'co' => 'co',
  'identifier' => 'identifier',
  'proc' => 'proc',
  'pointer' => 'pointer',
  'flush' => 'flush',
  'contains' => 'contains',
  'access' => 'access',
  'nullify' => 'nullify',
  'bind' => 'bind',
  'import' => 'import',
  'parent' => 'parent',
  'init' => 'init',
  'loop' => 'loop',
  'selector' => 'selector',
  'single' => 'single',
  'non_overridable' => 'non_overridable',
  'kernels' => 'kernels',
  'program' => 'program',
  'named' => 'named',
  'device' => 'device',
  'dummy' => 'dummy',
  'item' => 'item',
  'literal' => 'literal',
  'explicit' => 'explicit',
  'elemental' => 'elemental',
  'io' => 'io',
  'intent' => 'intent',
  'component' => 'component',
  'real' => 'real',
  'do' => 'do',
  'parens' => 'parens',
  'associate' => 'associate',
  'triplet' => 'triplet',
  'K' => 'kind',
  'block' => 'block',
  'enum' => 'enum',
  'assigned' => 'assigned',
  'prefix' => 'prefix',
  'ancestor' => 'ancestor',
  'selecttype' => 'selecttype',
  'intrinsic' => 'intrinsic',
  'inquiry' => 'inquiry',
  'decl' => 'decl',
  'sections' => 'sections',
  'spec' => 'spec',
  'input' => 'input',
  'final' => 'final',
  'definition' => 'definition',
  'iterator' => 'iterator',
  'procedure' => 'procedure',
  'share' => 'share',
  'deferred' => 'deferred',
  'return' => 'return',
  'arithmetic' => 'arithmetic',
  'test' => 'test',
  'omp' => 'omp',
  'integer' => 'integer',
  'case' => 'case',
  'cache' => 'cache',
  'write' => 'write',
  'designator' => 'designator',
  'size' => 'size',
  'numeric' => 'numeric',
  'equivalence' => 'equivalence',
  'user' => 'user',
  'allocatable' => 'allocatable',
  'section' => 'section',
  'format' => 'format',
  'routine' => 'routine',
  'generic' => 'generic',
  'read' => 'read',
  'use' => 'use',
  'attribute' => 'attribute',
  'logical' => 'logical',
  'continue' => 'continue',
  'open' => 'open',
  'host' => 'host',
  'V' => 'variable',
  'common' => 'common',
  'mark' => 'mark',
  'pos' => 'pos',
  'assign' => 'assign',
  'N' => 'name',
  'select' => 'select',
  'S' => 'symbol',
  'unit' => 'unit',
  'none' => 'none',
  'saved' => 'saved',
  'chunk' => 'chunk',
  'code' => 'code',
  'group' => 'group',
  'then' => 'then',
  'E' => 'expr',
  'a' => 'assignment',
  'dtio' => 'dtio',
  'letter' => 'letter',
  'pass' => 'pass',
  'entry' => 'entry',
  'cray' => 'cray',
  'function' => 'function',
  'rename' => 'rename',
  'sequence' => 'sequence',
  'stride' => 'stride',
  'inquire' => 'inquire',
  'include' => 'include',
  'print' => 'print',
  'lower' => 'lower',
  'char' => 'char',
  'DIM' => 'dimension',
  'declare' => 'declare',
  'allocate' => 'allocate',
  'contiguous' => 'contiguous',
  'atomic' => 'atomic',
  'R' => 'ref',
  'computed' => 'computed',
  'op' => 'operator',
  'element' => 'element',
  'external' => 'external',
  'stop' => 'stop',
  'obj' => 'object',
  'where' => 'where',
  'character' => 'character',
  'nature' => 'nature',
  'else' => 'else',
  'set' => 'set',
  'output' => 'output',
  'derived' => 'derived',
  'module' => 'module',
  'LC' => 'local',
  'association' => 'association',
  'upper' => 'upper',
  'internal' => 'internal',
  'label' => 'label',
  'namelist' => 'namelist',
  'enumerator' => 'enumerator',
  'extends' => 'extends',
  'ordered' => 'ordered',
  'subroutine' => 'subroutine',
  'call' => 'call',
  'repeat' => 'repeat',
  'clause' => 'clause',
  'target' => 'target',
  'forall' => 'forall',
  'volatile' => 'volatile'
}
};

sub lookupU2S
{
  my $x = shift;
  unless (exists ($U2S{$x}))
    {
      my @x = split (m/-/o, $x);
      $_ = $U2S{$_} for (@x);
      if (grep { !defined ($_) } @x)
        {
          die ("Cannot translate $x\n");
        }
      $U2S{$x} = join ('-', @x);
      $S2U{$U2S{$x}} = $x;
    }
  return $U2S{$x};
}

sub lookupS2U
{
  my $x = shift;
  unless (exists ($S2U{$x}))
    {
      my @x = split (m/-/o, $x);
      $_ = $S2U{$_} for (@x);
      if (grep { !defined ($_) } @x)
        {
          die ("Cannot translate $x\n");
        }
      $S2U{$x} = join ('-', @x);
      $U2S{$S2U{$x}} = $x;
    }
  return $S2U{$x};
}

1;
